# Requesting a url
# ---------------------------------
response = HTTP::Client.get "https://www.commissioncrowd.com"
response.status_code      # => 200
puts response.body.lines.first # => "<!doctype html>"


# Serving posts from markdown files
# ---------------------------------
if File.exists?("content/#{resource}.md")
    FrontMatter.open("content/#{resource}.md", skip_newlines: false) { |front_matter, content_io|
        fm = parse_frontmatter(front_matter)
        md = content_io.gets_to_end.as(String)
        options = Markd::Options.new(smart: true, safe: true)
        html = Markd.to_html(md, options).gsub("/bucket/", imgbucket)
        render_article ctx, resource, fm["title"], html
    }
else
    error ctx, "Page not found", HTTP::Status.new(404)
end

# List of files
# -----------------------------------
d = Dir.new("content")
files = d.each_child
render ctx, "src/templates/home.ecr", "The Crystal World"


# POST params
# -----------------------------------
if context.request.body
    params = HTTP::Params.parse(context.request.body)
    context.response.print "Hello #{params["user"]? || "Anonymous"}!"
end



# DB create
# -----------------------------------
DataLib.create_article(
    slug: "there-are-ghosts-in-this-room",
    title: fm["title"],
    tags: fm["tags"],
    date: "2015-04-25 00:00:00.000",
    image: false,
    imageClass: fm["imageclass"],
    draft: true,
    content: md
)

# Crinja
            template = tengine.get_template("base.html")
            puts template.render({
                "foo" => "jo"
            })


# OLD ECR RENDERING
def self.render_and_out(context, title, content, error_msg=nil)
    cachebust = Time.monotonic.to_s().split(".")[-1]
    header = ECR.render "src/templates/components/header.ecr"
    populated_layout = ECR.render "src/templates/layouts/base.ecr"
    context.response.content_type = "text/html; charset=UTF-8"
    context.response.print populated_layout
end