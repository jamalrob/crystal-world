# Requesting a url
# ---------------------------------
response = HTTP::Client.get "https://www.commissioncrowd.com"
response.status_code      # => 200
puts response.body.lines.first # => "<!doctype html>"


# Serving posts from markdown files
# ---------------------------------
if File.exists?("content/#{resource}.md")
    FrontMatter.open("content/#{resource}.md", skip_newlines: false) { |front_matter, content_io|
        fm = parse_frontmatter(front_matter)
        md = content_io.gets_to_end.as(String)
        options = Markd::Options.new(smart: true, safe: true)
        html = Markd.to_html(md, options).gsub("/bucket/", imgbucket)
        render_article ctx, resource, fm["title"], html
    }
else
    error ctx, "Page not found", HTTP::Status.new(404)
end

# List of files
# -----------------------------------
d = Dir.new("content")
files = d.each_child
render ctx, "src/templates/home.ecr", "The Crystal World"


# BASIC AUTH: client
document.body.addEventListener('htmx:configRequest', function(evt) {
    let target = evt.detail.target
    let headers = evt.detail.headers
    let params = evt.detail.parameters

    if(target.tagName === 'FORM' && target.classList.contains("login")) {
        headers['Authorization'] = "Basic " + b64EncodeUnicode(params.username + ":" + params.password);
        params.username = '';
        params.password = '';
    }
});

# BASIC AUTH: server
if hd = context.request.headers["Authorization"]?
    credstring = hd.split("Basic ")[1]?
    if credstring
        creds = Base64.decode_string(credstring).split(":")
        if creds[0] == env["USERNAME"] && creds[1] == env["PASSWORD"]
            context.response.status_code = 200
            context.response.print "ok"
            context.response.headers["HX-Redirect"] = "/about"
            context.response.redirect "/admin"
            next
        end
    end
end
context.response.status_code = 401
context.response.headers["WWW-Authenticate"] = "Basic realm=\"Login Required\""



# API ROUTE CONTEXT
#context.response.content_type = "application/json"
#context.response.headers["Access-Control-Request-Headers"] = "Content-Type, application/json"
#context.response.headers["Access-Control-Allow-Origin"] = "http://127.0.0.1:8080"
#context.response.headers["Access-Control-Allow-Credentials"] = "true"
#context.response.headers["Access-Control-Allow-Methods"] = "POST, GET, OPTIONS"
#context.response.headers["Access-Control-Allow-Content-Type"] = "application/json"
#context.response.headers["Access-Control-Allow-Headers"] = "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"




# DB create
# -----------------------------------
DataLib.create_article(
    slug: "there-are-ghosts-in-this-room",
    title: fm["title"],
    tags: fm["tags"],
    date: "2015-04-25 00:00:00.000",
    image: false,
    imageClass: fm["imageclass"],
    draft: true,
    content: md
)

# Crinja
            template = tengine.get_template("base.html")
            puts template.render({
                "foo" => "jo"
            })


# OLD ECR RENDERING
def self.render_and_out(context, title, content, error_msg=nil)
    cachebust = Time.monotonic.to_s().split(".")[-1]
    header = ECR.render "src/templates/components/header.ecr"
    populated_layout = ECR.render "src/templates/layouts/base.ecr"
    context.response.content_type = "text/html; charset=UTF-8"
    context.response.print populated_layout
end


# SIGNUP

when "admin/signup"
    # On successful signup:
    sessionid = Random::Secure.hex(16)
    csrf_token = Random::Secure.hex(16)
    # TO STORE THE PASSWORD:
    securepwd = Argon2::Password.create("mypwd")
    # create database user